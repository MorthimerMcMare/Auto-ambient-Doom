version "2.4.0"

#include "ZScript/AutoAmbientCore/Constants.zsc"
#include "ZScript/AutoAmbientCore/Utils.zsc"

#include "ZScript/AutoAmbientCore/DListTexCache.zsc"
#include "ZScript/AutoAmbientCore/SListSpawned.zsc"

#include "ZScript/AutoAmbientCore/DataClasses.zsc"
#include "ZScript/AutoAmbientCore/AutoActors.zsc"
#include "ZScript/AutoAmbientCore/ConfigParser.zsc"



class AutoAmbientGlobalHandler: StaticEventHandler {
	const AutoAmbientHandlerOrder = 0x7FAA0004; // ZChecker: 0x7FAA0005 and 0x7FAA0006.

	const replicateParserMaxAmount = 24;
	int replicateParserAmount; // To prevent infinite recursive including loop.
	//int currentGlobalLumpPos; // Dangerous variable, in fact.
	int parserErrorLine;
	String parserErrorFilename;

	bool dontLoadFlag;
	//int actionsTimeCounter; // "Object::MSTime();"

	AutoAmbientMapSet maptextures;
	Array<AutoAmbientTexture> textures;
	Array<AutoAmbientGroup> groups;
	Array<AutoAmbientTextureParameter> textureparams;
	Array<AutoAmbientSoundDefinition> sounddefs;

	double topLevelBound, rightLevelBound, bottomLevelBound, leftLevelBound;


	// Static event handlers (and its finders) has quite confusing behaviour,
	//so it's better to set pointer to this class manually.
	static AutoAmbientGlobalHandler Get( void ) {
		return AutoAmbientGlobalHandler( StaticEventHandler.Find( "AutoAmbientGlobalHandler" ) );
	}



	bool DescendIncludeFileLevel( void ) {
		bool outValue = false;

		if ( replicateParserAmount < replicateParserMaxAmount ) {
			replicateParserAmount++;
			outValue = true;
		}

		return outValue;
	}

	void AscendIncludeFileLevel( void ) {
		if ( replicateParserAmount > 0 )
			replicateParserAmount--;
		else
			AutoAmbientLogger.Get().Log( LL_Emergency, GetClassName() .. "AscendIncludeFileLevel(). Tried to ascend over the first level." );
	}

	String GetFormattedIncludeFileLevel( void ) {
		return TEXTCOLOR_GRAY .. ( ( replicateParserAmount == 0 )? "top" : "nested level " .. replicateParserAmount .. "\c-" );
	}


	/*void ResetGlobalLumpPos( void ) {
		currentGlobalLumpPos = -1;
	}

	int GetPreviousGlobalLumpPos( String baseLumpName ) {
		int outPos = -1;

		if ( currentGlobalLumpPos == -1 ) {
			int baseLumpIndex = Wads.CheckNumForName( baseLumpName, Wads.ns_global, currentGlobalPos );

			if ( baseLumpIndex != -1 ) {
				for ( int i = 0; i < 99; i++ ) {
					int compLumpIndex = Wads.CheckNumForName( baseLumpName, Wads.ns_global, i );

					if ( compLumpIndex == -1 ) {
						break;
					} else if ( baseLumpIndex == compFileIndex ) {
						outPos = ( i == 0? -1 : i );
						break;
					}
				}

			} else {
				AutoAmbientLogger.Get().Log( LL_Emergency, GetClassName() .. "::GetPreviousGlobalFilePos(). Cannot find base lump \"" .. baseLumpName .. "\"." );
			}
		} else {
			outPos = --currentGlobalLumpPos;
		}

		return outPos;
	}*/


	protected AutoAmbientTexture FindInvalidTexture( void ) {
		for ( int i = 0; i < textures.Size(); i++ )
			if ( !textures[ i ].Validate() )
				return textures[ i ];

		return NULL;
	}

	protected bool IsAutoAmbientEnabled( void ) {
		CVar AAEnabled = CVar.FindCVar( "mcm_aambient_enabled" );
		return ( AAEnabled && AAEnabled.GetBool() );
	}


	// Configuration init and file parsing:
	override void OnRegister() {
		SetOrder( AutoAmbientHandlerOrder );
		AutoAmbientLogger logger = AutoAmbientLogger.Get();

		if ( !IsAutoAmbientEnabled() ) {
			logger.Log( LL_Detailed, GetClassName() .. "::OnRegister(). AutoAmbient isn't enabled, parsing skipped." );
			dontLoadFlag = true;

			Super.OnRegister();
			return;
		}

		maptextures = AutoAmbientMapSet.Create();
		textures.Clear();
		groups.Clear();
		textureparams.Clear();
		sounddefs.Clear();

		parserErrorLine = AAParser_NoErrorLine;
		//ResetGlobalLumpPos();


		if ( AutoAmbientConfigParser.Create( self ).ParseFile( "aambient.cfg", false ) && parserErrorLine == AAParser_NoErrorLine )
			AutoAmbientConfigParser.Create( self ).ParseFile( "aambient", true, -1 );


		if ( parserErrorLine == AAParser_NoErrorLine ) {
			logger.Log( LL_Main | LL_NoPrefix, GetClassName() .. "::OnRegister(). Loading configuration done." );

			AutoAmbientTexture invalidTexture = FindInvalidTexture();

			if ( invalidTexture ) {
				logger.Log( LL_Emergency, GetClassName() .. "::OnRegister(). Texture definition ID " .. invalidTexture.id .. " is not valid." );
				logger.Log( LL_Main, GetClassName() .. "::OnRegister(). Validation callback: " 
								.. "id=" .. TexMan.GetName( invalidTexture.id ) .. ", size.Length()=" .. invalidTexture.size.Length()
								.. ", groups.Size()=" .. invalidTexture.groups.Size() .. ", groupparams.Size()=" .. invalidTexture.groupparams.Size()
								.. ", addingdontLoadFlag=" .. invalidTexture.invalidFlag );

				dontLoadFlag = true;
			} else if ( !groups.Size() ) {
				logger.Log( LL_Main, GetClassName() .. "::OnRegister(). No group blocks provided in the configuration file." );
				dontLoadFlag = true;
			} else if ( !textures.Size() ) {
				logger.Log( LL_Main, GetClassName() .. "::OnRegister(). No texture definition blocks provided in the configuration file." );
				dontLoadFlag = true;
			}
		} else {
			dontLoadFlag = true;
			logger.Log( LL_Emergency, GetClassName() .. "::OnRegister(). Error during configuration files parsing in " .. parserErrorFilename .. " on line " .. parserErrorLine .. "." );
		}


		// See "Utils.zsc" -> "extend class AutoAmbientGlobalHandler".
		if ( logger.aaCurLogLevel >= LL_Debug )
			OnRegisterDebugFullOutput();

		Super.OnRegister();
	} // of override void OnRegister() {}


	override void WorldLoaded( WorldEvent e ) {
		// Skip all other checks if game is loaded from save, 
		//if an error occured, etc.
		if ( e.IsSaveGame || dontLoadFlag || !IsAutoAmbientEnabled() ) {
			Super.WorldLoaded( e );
			return;
		}

		AutoAmbientLogger logger = AutoAmbientLogger.Get();


		// Static event handlers saves information through levels.
		for ( int i = 0; i < groups.Size(); i++ )
			groups[ i ].ClearSpawned();


		// Locating a top/right/bottom/left level border:
		rightLevelBound = -32767.0;
		bottomLevelBound = 32767.0;
		topLevelBound = -32767.0;
		leftLevelBound = 32767.0;

		for ( int i = 0; i < level.Vertexes.Size(); i++ ) {
			vector2 vertexpos = level.Vertexes[ i ].p;
			if ( vertexpos.y > topLevelBound )
				topLevelBound = vertexpos.y;
			else if ( vertexpos.y < bottomLevelBound )
				bottomLevelBound = vertexpos.y;

			if ( vertexpos.x > rightLevelBound )
				rightLevelBound = vertexpos.x;
			else if ( vertexpos.x < leftLevelBound )
				leftLevelBound = vertexpos.x;
		}

		logger.Log( LL_Detailed, "Level bound box: top " .. topLevelBound .. ", right " .. rightLevelBound .. ", bottom " .. bottomLevelBound .. ", left " .. leftLevelBound .. "." );


		AutoAmbientCacheTextureKeeper cachedTextures = AutoAmbientCacheTextureKeeper.CreateKeeper( self );

		int totalAutoAmbientActorsSpawned = 0;

		// A-a-argh! Seven nested "for" cycles in worst case!..
		//(Alright, it's non-exponential dependence, most of them has from one 
		//to three iterations).

		// All sides cycle:
		for ( int curSideIndex = 0; curSideIndex < level.Sides.Size(); curSideIndex++ ) {
			Side l = level.Sides[ curSideIndex ];

			// Top/middle/bottom texture on line cycle:
			for ( int curSidePos = Side.top; curSidePos <= Side.bottom; curSidePos++ ) {
				TextureID texID = l.GetTexture( curSidePos );

				if ( texID ) {
					// Finding texture in cache array or creating it there:
					AutoAmbientCacheTexture cachedTexture = cachedTextures.Update( texID );

					// Spawning actor(s) according to the cached groups:
					AutoAmbientTexture curtexdef = cachedTexture.texdef;
					if ( curtexdef ) {
						// Storing actors spawned on one line to flush them at
						//once later. May look illogical, but it saves about
						//2-13% of time (see Doom 2 MAP24).
						Array<AutoAmbientGroup> uniqueGroups;

						for ( int j = 0; j < curtexdef.groups.Size(); j++ ) {
							AutoAmbientGroup curGroup = curtexdef.groups[ j ];

							totalAutoAmbientActorsSpawned += curGroup.SpawnActor( l, curSidePos, curtexdef, j );

							bool uniqueGroupFlag = true;
							for ( int k = 0; k < uniqueGroups.Size(); k++ ) {
								if ( curGroup == uniqueGroups[ k ] ) {
									uniqueGroupFlag = false;
									break;
								}
							}

							if ( uniqueGroupFlag )
								uniqueGroups.Push( curGroup );
						}

						// Move all actors spawned on line to the general array:
						for ( int j = 0; j < uniqueGroups.Size(); j++ )
							uniqueGroups[ j ].FlushSpawnLineActors();

					} // of if ( curtexdef ) {}

				} // of if ( texID ) {}

			} // of for ( int curSidePos = 0; curSidePos < 2; curSidePos++ ) {}

		} // of for ( int curSideIndex = 0; curSideIndex < level.Sides.Size(); curSideIndex++ ) {}

		logger.Log( LL_Detailed, GetClassName() .. "::WorldLoaded(). Total ambient actors spawned: " .. totalAutoAmbientActorsSpawned .. "." );


		if ( logger.aaCurLogLevel >= LL_Debug ) {
			logger.Log( LL_Debug, "AutoAmbientCacheTextureKeeper. Head " .. cachedTextures.head .. " <<->> tail " .. cachedTextures.tail .. "." );
			AutoAmbientCacheTexture debugTexCache = cachedTextures.head;
			uint debugTotalTexCacheAmount = 0;

			while ( debugTexCache ) {
				String debugTexCacheName = String.Format( "%8s", TexMan.GetName( debugTexCache.texID ) );
				logger.Log( LL_Debug, "|- Texture " .. debugTexCacheName .. " freq " .. debugTexCache.frequency .. ": (" .. debugTexCache.prev .. ")<p " .. debugTexCache .. " n>(" .. debugTexCache.next .. ")" );
				debugTexCache = debugTexCache.next;
				debugTotalTexCacheAmount++;
			}

			logger.Log( LL_Debug, "AutoAmbientCacheTextureKeeper. Total texture cache nodes amount: " .. debugTotalTexCacheAmount .. "." );

			for ( int i = 0; i < groups.Size(); i++ ) {
				uint spawnedInGroup = groups[ i ].spawned.Size();

				if ( !spawnedInGroup )
					logger.Log( LL_Debug, GetClassName() .. "::WorldLoaded(). No spawned actors for group \"" .. groups[ i ].name .. "\"." );
				else
					logger.Log( LL_Debug, GetClassName() .. "::WorldLoaded(). Group \"" .. TEXTCOLOR_BLUE .. groups[ i ].name .. logger.LLCOLOR_DEBUG .. "\" total spawned: " .. TEXTCOLOR_GRAY .. spawnedInGroup .. logger.LLCOLOR_Debug .. "." );

				if ( groups[ i ].GridCreated() )
					groups[ i ].PrintGrid( logger );
			}
		}


		CVar optionCVar = CVar.GetCVar( "mcm_aambient_showactorsatstart" );

		if ( optionCVar && optionCVar.GetBool() )
			EventHandler.SendNetworkEvent( "mcm_autoambient_actors_visibility", 1 );

		// Yes, I know perfectly well that garbage collector will successfully
		//destroy an array.
		cachedTextures.Clear();

		Super.WorldLoaded( e );
	} // of override void WorldLoaded( WorldEvent e ) {}


	override void NetworkProcess( ConsoleEvent e ) {
		if ( e.name == "mcm_autoambient_actors_visibility" ) {
			bool setInvisibleFlag = ( e.args[ 0 ] == 0 );

			for ( int i = 0; i < groups.Size(); i++ ) {
				AutoAmbientListSpawnedKeeper spawnedKeeper = groups[ i ].spawned;
				Actor curspawned = spawnedKeeper.ActorIteratorBegin();

				while ( curspawned ) {
					curspawned.bINVISIBLE = setInvisibleFlag;
					curspawned = spawnedKeeper.ActorIteratorNext();
				}
			} // of for ( int i = 0; i < groups.Size(); i++ ) {}

			AutoAmbientLogger.Get().Log( LL_Detailed, "Changed automatic actors visibility to " .. !setInvisibleFlag );
		} // of if ( e.name == "mcm_autoambient_actors_visibility" ) {}

		Super.NetworkProcess( e );
	} // of override void NetworkProcess( ConsoleEvent e ) {}

} // of class AmbientHandler: EventHandler {}
