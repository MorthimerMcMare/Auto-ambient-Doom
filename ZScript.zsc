version "2.4.0"

#include "ZScript/AutoAmbientCore/Constants.zsc"
#include "ZScript/AutoAmbientCore/Utils.zsc"

#include "ZScript/AutoAmbientCore/DListTexCache.zsc"
#include "ZScript/AutoAmbientCore/SListSpawned.zsc"

#include "ZScript/AutoAmbientCore/DataClasses.zsc"
#include "ZScript/AutoAmbientCore/AutoActors.zsc"
#include "ZScript/AutoAmbientCore/ConfigParser.zsc"

#include "ZScript/AutoAmbientCore/SpawnActors.zsc"



class AutoAmbientGlobalHandler: StaticEventHandler {
	const AutoAmbientHandlerOrder = 0x7FAA0004; // ZChecker: 0x7FAA0005 and 0x7FAA0006.

	const replicateParserMaxAmount = 24;
	int replicateParserAmount; // To prevent infinite recursive including loop.
	//int currentGlobalLumpPos; // Dangerous variable, in fact.
	int parserErrorLine;
	String parserErrorFilename;
	ENewlineTypes OSNewlinesType;

	bool dontLoadFlag;

	// Warning! StaticEventHandler nullifies all its fields on heaviest 
	//game mode changes (e. g., from VM loading to title screen).
	AutoAmbientLogger logger;
	AutoAmbientSoundActorConfiguration autoclassConfig;

	//int actionsTimeCounter; // "Object::MSTime();"

	AutoAmbientMapSet maptextures;
	Array<AutoAmbientTexture> textures;
	Array<AutoAmbientGroup> groups;
	Array<AutoAmbientTextureParameter> textureparams;
	Array<AutoAmbientSoundDefinition> sounddefs;

	double topLevelBound, rightLevelBound, bottomLevelBound, leftLevelBound;


	// Configuration init and file parsing:
	override void OnRegister() {
		SetOrder( AutoAmbientHandlerOrder );
		AutoAmbientLogger reglogger = AutoAmbientLogger.Get();

		if ( !IsAutoAmbientEnabled() ) {
			reglogger.Log( LL_Detailed, GetClassName() .. "::OnRegister(). AutoAmbient isn't enabled, parsing skipped." );
			dontLoadFlag = true;

			Super.OnRegister();
			return;
		}

		maptextures = AutoAmbientMapSet.Create();
		textures.Clear();
		groups.Clear();
		textureparams.Clear();
		sounddefs.Clear();

		parserErrorLine = AAParser_NoErrorLine;
		//ResetGlobalLumpPos();

		autoclassConfig = new( 'AutoAmbientSoundActorConfiguration' );

		OSNewlinesType = AutoAmbientConfigParser.GetTextNewlineType( "\n" );

		AutoAmbientConfigParser.Create( self ).ParseFile( "aambient", true, -1 );


		if ( parserErrorLine == AAParser_NoErrorLine ) {
			reglogger.Log( LL_Main | LL_NoPrefix, GetClassName() .. "::OnRegister(). Loading configuration done." );

			AutoAmbientTexture invalidTexture = FindInvalidTexture();

			if ( invalidTexture ) {
				reglogger.Log( LL_Emergency, GetClassName() .. "::OnRegister(). Texture definition ID " .. invalidTexture.id .. " is not valid." );
				reglogger.Log( LL_Main, GetClassName() .. "::OnRegister(). Validation callback: " 
								.. "id=" .. TexMan.GetName( invalidTexture.id ) .. ", size.Length()=" .. invalidTexture.size.Length()
								.. ", groups.Size()=" .. invalidTexture.groups.Size() .. ", groupparams.Size()=" .. invalidTexture.groupparams.Size()
								.. ", addingdontLoadFlag=" .. invalidTexture.invalidFlag );

				dontLoadFlag = true;
			} else if ( !groups.Size() ) {
				reglogger.Log( LL_Main, GetClassName() .. "::OnRegister(). No group blocks provided in the configuration file." );
				dontLoadFlag = true;
			} else if ( !textures.Size() ) {
				reglogger.Log( LL_Main, GetClassName() .. "::OnRegister(). No texture definition blocks provided in the configuration file." );
				dontLoadFlag = true;
			}
		} else {
			dontLoadFlag = true;
			reglogger.Log( LL_Emergency, GetClassName() .. "::OnRegister(). Error during configuration files parsing in " .. parserErrorFilename .. " on line " .. parserErrorLine .. "." );
		}


		// See "Utils.zsc" -> "extend class AutoAmbientGlobalHandler".
		if ( reglogger.aaCurLogLevel >= LL_Debug )
			OnRegisterDebugFullOutput();

		Super.OnRegister();
	} // of override void OnRegister() {}


	override void WorldLoaded( WorldEvent e ) {
		// Skip all other checks if game is loaded from save, 
		//if an error occured, etc.
		if ( e.IsSaveGame || dontLoadFlag || !IsAutoAmbientEnabled() ) {
			Super.WorldLoaded( e );
			return;
		}

		logger = AutoAmbientLogger.Get();

		// Static event handlers saves information through levels.
		for ( int i = 0; i < groups.Size(); i++ )
			groups[ i ].ClearSpawned();

		// Locating a top/right/bottom/left level border:
		LocateLevelBorders();
		logger.Log( LL_Detailed, "Level bound box: top " .. topLevelBound .. ", right " .. rightLevelBound .. ", bottom " .. bottomLevelBound .. ", left " .. leftLevelBound .. "." );


		// Spawning itself (see "ZScript/AutoAmbientCore/SpawnActors.zsc"):
		AutoAmbientCacheTextureKeeper cachedTextures = AutoAmbientCacheTextureKeeper.CreateKeeper( self );
		int totalAutoAmbientActorsSpawned = SpawnAllActors( cachedTextures );


		// Partial clearing actor arrays for fitting to the limit (we cannot 
		//know in advance how many actors will be spawned on level):
		int reservedSoundChannels = 32;
		CVar optionCVar = CVar.GetCVar( "mcm_aambient_sndchannelsreserve" );

		if ( optionCVar )
			reservedSoundChannels = optionCVar.GetInt();
		else
			logger.Log( LL_Main, logger.LLCOLOR_EMERGENCY .. "Cannot find CVar \"mcm_aambient_sndchannelsreserve\", using default value (32)." );

		int availChannels = snd_channels - reservedSoundChannels;
		if ( availChannels < 24 ) {
			logger.Log( LL_Detailed, "Calculated available sound channels amount is too little (" .. TEXTCOLOR_YELLOW .. availChannels .. "\c-), set to 24." );
			availChannels = 24;
		}

		// Cycle isn't the best choice, of course...
		while ( totalAutoAmbientActorsSpawned > availChannels ) {
			logger.Log( LL_Detailed, "Partially clearing from " .. TEXTCOLOR_YELLOW .. totalAutoAmbientActorsSpawned .. "\c- sound actors because of limit of " .. TEXTCOLOR_FIRE .. availChannels .. "\c- available sound channels (reserved " .. reservedSoundChannels .. ")." );

			int newTotalActorsSpawned = 0;

			for ( int i = 0; i < groups.Size(); i++ ) {
				int prevActorsAmount = groups[ i ].spawned.Size();

				if ( prevActorsAmount > 0 ) {
					groups[ i ].spawned.PartiallyClear( 1.0 - 0.85 * availChannels / double( totalAutoAmbientActorsSpawned ) );
					int newActorsAmount = groups[ i ].spawned.Size();

					newTotalActorsSpawned += newActorsAmount;

					logger.Log( LL_Debug, "Group " .. groups[ i ].name .. ": was " .. prevActorsAmount .. " actors, became " .. newActorsAmount .. " actors." );
				}
			}

			totalAutoAmbientActorsSpawned = newTotalActorsSpawned;
		} // of while ( totalAutoAmbientActorsSpawned > availChannels ) {}


		// Post-logging:
		logger.Log( LL_Detailed, GetClassName() .. "::WorldLoaded(). Total ambient actors spawned: " .. totalAutoAmbientActorsSpawned .. "." );

		if ( logger.aaCurLogLevel >= LL_Debug ) {
			logger.Log( LL_Debug, "AutoAmbientCacheTextureKeeper. Head " .. cachedTextures.head .. " <<->> tail " .. cachedTextures.tail .. "." );
			AutoAmbientCacheTexture debugTexCache = cachedTextures.head;
			uint debugTotalTexCacheAmount = 0;

			while ( debugTexCache ) {
				String debugTexCacheName = String.Format( "%8s", TexMan.GetName( debugTexCache.texID ) );
				logger.Log( LL_Debug, "|- Texture " .. debugTexCacheName .. " freq " .. debugTexCache.frequency .. ": (" .. debugTexCache.prev .. ")<p " .. debugTexCache .. " n>(" .. debugTexCache.next .. ")" );
				debugTexCache = debugTexCache.next;
				debugTotalTexCacheAmount++;
			}

			logger.Log( LL_Debug, "AutoAmbientCacheTextureKeeper. Total texture cache nodes amount: " .. debugTotalTexCacheAmount .. "." );

			for ( int i = 0; i < groups.Size(); i++ ) {
				uint spawnedInGroup = groups[ i ].spawned.Size();

				if ( !spawnedInGroup )
					logger.Log( LL_Debug, GetClassName() .. "::WorldLoaded(). No spawned actors for group \"" .. groups[ i ].name .. "\"." );
				else
					logger.Log( LL_Debug, GetClassName() .. "::WorldLoaded(). Group \"" .. TEXTCOLOR_BLUE .. groups[ i ].name .. logger.LLCOLOR_DEBUG .. "\" total spawned: " .. TEXTCOLOR_GRAY .. spawnedInGroup .. logger.LLCOLOR_Debug .. "." );

				if ( groups[ i ].GridCreated() )
					groups[ i ].PrintGrid( logger );
			}
		}


		optionCVar = CVar.GetCVar( "mcm_aambient_showactorsatstart" );

		if ( optionCVar && optionCVar.GetBool() )
			EventHandler.SendNetworkEvent( "mcm_autoambient_actors_visibility", 1 );


		// Yes, I know perfectly well that garbage collector will successfully
		//destroy an array.
		cachedTextures.Clear();

		Super.WorldLoaded( e );
	} // of override void WorldLoaded( WorldEvent e ) {}


	override void NetworkProcess( ConsoleEvent e ) {
		if ( e.name == "mcm_autoambient_actors_visibility" ) {
			bool setInvisibleFlag = ( e.args[ 0 ] == 0 );

			for ( int i = 0; i < groups.Size(); i++ ) {
				AutoAmbientListSpawnedKeeper spawnedKeeper = groups[ i ].spawned;
				Actor curspawned = spawnedKeeper.ActorIteratorBegin();

				while ( curspawned ) {
					curspawned.bINVISIBLE = setInvisibleFlag;
					curspawned = spawnedKeeper.ActorIteratorNext();
				}
			} // of for ( int i = 0; i < groups.Size(); i++ ) {}

			AutoAmbientLogger.Get().Log( LL_Detailed, "Changed automatic actors visibility to " .. !setInvisibleFlag );

		} else if ( e.name == "mcm_autoambient_destroy_actors" ) {
			for ( int i = 0; i < groups.Size(); i++ )
				groups[ i ].spawned.Clear();
		}

		Super.NetworkProcess( e );
	} // of override void NetworkProcess( ConsoleEvent e ) {}

} // of class AmbientHandler: EventHandler {}
