// Double-linked list ordered by use frequency.

class AutoAmbientCacheTexture {
	TextureID texID;
	AutoAmbientTexture texdef;
	uint frequency;

	AutoAmbientCacheTexture next, prev;
} // of class AutoAmbientCacheTexture {}

class AutoAmbientCacheTextureKeeper play {
	AutoAmbientCacheTexture head, tail, prevFound;
	AutoAmbientGlobalHandler g;
	AutoAmbientMapsData mapData;
	bool mustCheckForMapData;

	static AutoAmbientCacheTextureKeeper CreateKeeper( AutoAmbientGlobalHandler globalHandler ) {
		AutoAmbientCacheTextureKeeper newKeeper = new( 'AutoAmbientCacheTextureKeeper' );

		newKeeper.g = globalHandler;
		newKeeper.head = newKeeper.tail = NULL;
		newKeeper.mapData = NULL;
		newKeeper.mustCheckForMapData = true;

		return newKeeper;
	} // of static AutoAmbientCacheTextureKeeper CreateKeeper( AutoAmbientGlobalHandler globalHandler ) {}


	private AutoAmbientCacheTexture Append( TextureID texID ) {
		AutoAmbientCacheTexture newTextureCache = new( 'AutoAmbientCacheTexture' );

		newTextureCache.texID = texID;
		newTextureCache.frequency = 1;
		newTextureCache.texdef = NULL; // Texture may has no defined ambient actors.
		newTextureCache.next = NULL;

		// Locating new texture in map definition (if any) and in global scope.
		// Map texture definition:
		if ( !mapData && mustCheckForMapData ) {
			mapData = NULL;

			int mapDataIndex = g.maptextures.FindMap( level.mapname, level.getChecksum() );

			if ( mapDataIndex >= AutoAmbientMapSet.FMS_First )
				mapData = g.maptextures.maps[ mapDataIndex ];

			//console.printf( GetClassName() .. "::Append(). Check for map data: " .. mapData );

			mustCheckForMapData = false;
		}

		if ( mapData ) {
			for ( int j = 0; j < mapData.textures.Size(); j++ ) {
				if ( mapData.textures[ j ].id == texID ) {
					newTextureCache.texdef = mapData.textures[ j ];
					break;
				}
			}
		} // of if ( mapData ) {}

		// Global texture definitions:
		if ( !mapData || ( !newTextureCache.texdef && !mapData.restrictDefaultTextures ) ) {
			for ( int j = 0; j < g.textures.Size(); j++ ) {
				if ( g.textures[ j ].id == texID ) {
					newTextureCache.texdef = g.textures[ j ];
					break;
				}
			}
		} // of if ( !newTextureCache && ( mapData && !mapData.restrictDefaultTextures ) ) {}

		if ( !head ) {
			head = tail = newTextureCache;
		} else {
			tail.next = newTextureCache;
			newTextureCache.prev = tail;
			tail = newTextureCache;
		}

		prevFound = newTextureCache;

		return newTextureCache;
	} // of private AutoAmbientCacheTexture Append( TextureID texID ) {}

	AutoAmbientCacheTexture Update( TextureID texID ) {
		AutoAmbientCacheTexture texCacheFound = head; // Found/updated texture cache node.
		AutoAmbientCacheTexture prevFrequencyBlock = head;
		int prevFrequency = -1;


		if ( prevFound && prevFound.texID == texID ) {
			//console.printf( "prevFound " .. prevFound .. ": (freq " .. prevFound.frequency .. ", texname " .. prevFound.texID .. "), must be (texname " .. texID .. ")" );
			prevFrequencyBlock = texCacheFound = prevFound;

			while ( prevFrequencyBlock && ( prevFrequencyBlock.frequency == texCacheFound.frequency ) )
				prevFrequencyBlock = prevFrequencyBlock.prev;

			if ( !prevFrequencyBlock )
				prevFrequencyBlock = head;
			else
				prevFrequencyBlock = prevFrequencyBlock.next;

			//console.printf( " \\_ prevFrequencyBlock end: " .. prevFrequencyBlock .. " (freq " .. prevFrequencyBlock.frequency .. ", texname " .. prevFrequencyBlock.texID .. ")" );
		} else {
			while ( texCacheFound && texCacheFound.texID != texID ) {
				if ( prevFrequency != texCacheFound.frequency )
					prevFrequencyBlock = texCacheFound;

				prevFrequency = texCacheFound.frequency;
				texCacheFound = texCacheFound.next;
			}

			//if ( texCacheFound )
			//	console.printf( "NOT prevFound. texCacheFound " .. texCacheFound .. ": (freq " .. texCacheFound.frequency .. ", texname " .. texCacheFound.texID .. "), prevFrequencyBlock " .. prevFrequencyBlock .. ". Tex " .. texID );
			//else
			//	console.printf( "NOT prevFound. texCacheFound NULL, prevFrequencyBlock " .. prevFrequencyBlock .. ". Tex " .. texID );
		}


		if ( texCacheFound ) {
			prevFound = texCacheFound;

			texCacheFound.frequency++;

			// If found is not a head, unlink it ("aaabbbcCcdd" -> "aaabbbccdd")
			//and link closer to the list begin ("aaabbbccdd" -> "aaaBbbbccdd"):
			if ( texCacheFound != head && prevFrequencyBlock.frequency < texCacheFound.frequency ) {
				texCacheFound.prev.next = texCacheFound.next;

				if ( texCacheFound.next )
					texCacheFound.next.prev = texCacheFound.prev;
				else
					tail = texCacheFound.prev;

				// Linking again:
				texCacheFound.next = prevFrequencyBlock;
				texCacheFound.prev = prevFrequencyBlock.prev;

				texCacheFound.next.prev = texCacheFound;
				if ( texCacheFound.prev )
					texCacheFound.prev.next = texCacheFound;
				else
					head = texCacheFound;
			}

		} else {
			texCacheFound = Append( texID );
		}


		/*
		AutoAmbientCacheTexture debugTexCache = head;
		console.printf( GetClassName() .. "::Update() end. head " .. head .. " <<->> tail " .. tail );
		while ( debugTexCache ) {
			console.printf( "Node " .. debugTexCache .. ": (freq " .. debugTexCache.frequency .. ", texname " .. debugTexCache.texID .. ". p<" .. debugTexCache.prev .. "/" .. debugTexCache.next .. ">n)" );
			debugTexCache = debugTexCache.next;
		}

		console.printf( "" );
		*/

		return texCacheFound;
	} // of AutoAmbientCacheTexture Update( TextureID texID ) {}

	void Clear( void ) {
		AutoAmbientCacheTexture curNode = head;
		AutoAmbientCacheTexture prevNode;

		while ( curNode ) {
			prevNode = curNode;
			curNode = curNode.next;
			prevNode.Destroy();
		}
	} // of void Clear( void ) {}

} // of AutoAmbientCacheTextureKeeper {}
