// Single-linked list of spawned actors.

class AutoAmbientListSpawnedNode {
	Actor thing;

	AutoAmbientListSpawnedNode next;
}

class AutoAmbientListSpawnedKeeper play {
	AutoAmbientListSpawnedNode head, tail;
	uint length;

	// Shared iterator, avoid having more than one iterator user at once!
	AutoAmbientListSpawnedNode curiter;


	void AppendSpawnedActor( Actor spawned ) {
		AutoAmbientListSpawnedNode newNode = new( 'AutoAmbientListSpawnedNode' );
		newNode.thing = spawned;

		if ( head ) {
			tail.next = newNode;
			tail = newNode;
			length++;
		} else {
			head = tail = newNode;
			length = 1;
		}
	} // of void AddSpawnedActor( Actor spawned ) {}

	void AppendMoveToList( AutoAmbientListSpawnedKeeper otherKeeper ) {
		if ( head ) {
			if ( otherKeeper.head )
				otherKeeper.tail.next = head;
			else
				otherKeeper.head = head;

			otherKeeper.tail = tail;
			otherKeeper.length += length;

			head = tail = NULL;
			length = 0;
		}
	} // of void AppendMoveToList( AutoAmbientListSpawnedKeeper otherKeeper ) {}

	bool Empty( void ) {
		return !head;
	}


	Actor ActorIteratorBegin( void ) {
		if ( Empty() )
			return NULL;

		curiter = head;
		return curiter.thing;
	}

	Actor ActorIteratorNext( void ) {
		curiter = curiter.next;

		return ( curiter? curiter.thing : NULL );
	}


	int Size( void ) {
		return length;
	}

	void Clear( void ) {
		AutoAmbientListSpawnedNode curNode = head;
		AutoAmbientListSpawnedNode prevNode;

		while ( curNode ) {
			prevNode = curNode;
			curNode = curNode.next;
			prevNode.thing.Destroy();
			prevNode.Destroy();
		}

		length = 0;
	} // of void Clear( void ) {}

	// Clears "round( Size() * <delpercent == (0.0; 1.0)> )" nodes from the list.
	void PartiallyClear( double delpercent ) {
		if ( length > 2 && delpercent > 0.0 && delpercent < 1.0 ) {
			int preDeleteLength = length;

			AutoAmbientListSpawnedNode prevNode = head;
			AutoAmbientListSpawnedNode curNode = head.next;

			double flushDelay = 1 / delpercent;
			double curDelay = Random( 0.0, flushDelay );

			while ( curNode ) {
				if ( curDelay <= 0.0 ) {
					prevNode.next = curNode.next;
					curNode.thing.Destroy();
					curNode.Destroy();
					curNode = prevNode.next;
					length--;

					curDelay += flushDelay;
				}

				prevNode = curNode;
				if ( curNode )
					curNode = curNode.next;

				curDelay -= 1.0;
			}
		}
	} // of void PartiallyClear( double delpercent ) {}

} // of AutoAmbientListSpawnedKeeper {}
