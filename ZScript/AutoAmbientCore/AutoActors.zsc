
class AutoAmbientGroup play {
	// Minimal length of a cell side length (will be clamped to this value).
	const minGridCellSideLength = 96.0;

	// Maximal length of an array's each dimension (will be scaled to fit to).
	const maxGridLength = 31; // Note that real value will be increased by 1.

	// Maximal "Spawned" array size to use usual, non-9-cell-based algorithm.
	const wholeListAlgorithmMaxSpawnedSize = 31;


	AutoAmbientGlobalHandler g;
	AutoAmbientLogger logger;

	String name;
	Array< class<Actor> > classes;
	Array<AutoAmbientSoundDefinition> autoclasses;
	double actorsDistance; // Also side length of the one square (one cell).

	// All spawned on the level auto actors for this group:
	AutoAmbientListSpawnedKeeper spawned; // Often it's more fast to check for some actor in the whole list.
	Array<AutoAmbientSpawnedGridCellX> gridX;

	// Temporal array which contain all positions to be moved to the "spawned[]"
	//array on the next iteration. Defined for the quick same side distance
	//checks.
	AutoAmbientListSpawnedKeeper spawnedOnSide;


	double topLevelBound, leftLevelBound;

	int gridSizeX, gridSizeY;
	double cellSideSize;

	clearscope int GetGridXOffset( double posx ) const {
		return int( ( posx - leftLevelBound ) / cellSideSize );
	}

	clearscope int GetGridYOffset( double posy ) const {
		return int( ( topLevelBound - posy ) / cellSideSize );
	}


	void AddToGrid( Actor what ) {
		AutoAmbientSpawnedGridCellX curX = gridX[ GetGridXOffset( what.pos.x ) ];
		curX.y[ GetGridYOffset( what.pos.y ) ].AppendSpawnedActor( what );
	}


	bool checkSpawnDistance( vector3 posToCheck, AutoAmbientListSpawnedKeeper listToCheck, bool useDistMultipl, double lineDistSpawnChance ) {
		bool grouplingTooClose = false;

		double nextChance = FRandom( 0.0, 1.0 );
		vector3 vecdist;

		// To prevent the in-cycle check with the same result I'd prefer to
		//split the cycles. Seriously.
		if ( !useDistMultipl ) {
			Actor actoriter = listToCheck.ActorIteratorBegin();

			while ( actoriter ) {
				vecdist = posToCheck - actoriter.pos;

				if ( vecdist.Length() < actorsDistance ) {
					if ( nextChance < lineDistSpawnChance ) {
						//console.printf( "     nextChance (" .. nextChance .. ") < lineDistSpawnChance (" .. lineDistSpawnChance .. ")" );
						nextChance = FRandom( 0.0, 1.0 );
					} else {
						//console.printf( " BRK nextChance (" .. nextChance .. ") >= lineDistSpawnChance (" .. lineDistSpawnChance .. ")" );
						grouplingTooClose = true;
						break;
					}
				}

				actoriter = listToCheck.ActorIteratorNext();
			} // of while ( actoriter ) {}

		} else {
			Actor actoriter = listToCheck.ActorIteratorBegin();

			while ( actoriter ) {
				vecdist = posToCheck - actoriter.pos;

				if ( vecdist.Length() < actorsDistance ) {
					if ( nextChance < lineDistSpawnChance * vecdist.Length() / actorsDistance ) {
						nextChance = FRandom( 0.0, 1.0 );
					} else {
						grouplingTooClose = true;
						break;
					}
				}

				actoriter = listToCheck.ActorIteratorNext();
			} // of while ( actoriter ) {}

		} // of else of if ( useDistMultipl ) {}

		return grouplingTooClose;
	} // of private bool checkSpawnDistance( vector3 posToCheck, AutoAmbientListSpawnedKeeper listToCheck, bool useDistMultipl, double lineDistSpawnChance ) {}


	// "true" if there's other actors nearby.
	bool CheckForCloseNeighbours( vector3 pos, bool useDistMultipl, double lineDistSpawnChance ) {
		if ( !spawned || spawned.Empty() )
			return false;

		// Using fastest locating method (whole sequence/nearest grid cells):
		if ( !GridCreated() || spawned.Size() < wholeListAlgorithmMaxSpawnedSize ) {
			//console.printf( "Whole sequence algorithm." );
			return checkSpawnDistance( pos, spawned, useDistMultipl, lineDistSpawnChance );
		} else {
			int x = GetGridXOffset( pos.x );
			int y = GetGridYOffset( pos.y );

			//console.printf( "Group " .. name .. " ::CheckForCloseNeighbours(). x " .. x .. ", y " .. y .. ", gridSizeX " .. gridSizeX .. ", gridSizeY " .. gridSizeY );

			for ( int i = ( x < 1? x : x - 1 ); i < ( x >= gridSizeX? x + 1 : x + 2 ); i++ ) {
				for ( int j = ( y < 1? y : y - 1 ); j < ( y >= gridSizeY? y + 1 : y + 2 ); j++ ) {
					AutoAmbientSpawnedGridCellX curX = gridX[ i ];
					AutoAmbientListSpawnedKeeper curCell = curX.y[ j ];

					if ( !curCell.Empty() && checkSpawnDistance( pos, curCell, useDistMultipl, lineDistSpawnChance ) )
						return true;
				}
			}
		}

		return false;
	} // of bool CheckForCloseNeighbours( vector3 pos, bool useDistMultipl, double lineDistSpawnChance ) {}


	void CreateGrid( void ) {
		leftLevelBound = g.leftLevelBound;
		topLevelBound = g.topLevelBound;

		double levelHorizontalSize = g.rightLevelBound - leftLevelBound;
		double levelVerticalSize = topLevelBound - g.bottomLevelBound;

		cellSideSize = actorsDistance;

		// Clamp minimal square (cell) side length to not-too-little value.
		if ( cellSideSize < minGridCellSideLength )
			cellSideSize = minGridCellSideLength;

		gridSizeX = int( ceil( levelHorizontalSize / cellSideSize ) ) + 1;
		gridSizeY = int( ceil( levelVerticalSize / cellSideSize ) ) + 1;

		// Scale amount of cells to fit to the limit.
		if ( gridSizeX > maxGridLength || gridSizeY > maxGridLength ) {
			int gridMaxSize = ( gridSizeX > gridSizeY? gridSizeX : gridSizeY );
			double prevCellSideSize = cellSideSize;

			cellSideSize = ceil( cellSideSize * ( gridMaxSize / double( maxGridLength ) ) );

			AutoAmbientLogger.Get().Log( LL_Debug, GetClassName() .. "::CreateGrid() for \"" .. TEXTCOLOR_GRAY .. name .. AutoAmbientLogger.LLCOLOR_Debug .. "\". Cell side resized from " .. prevCellSideSize .. " (x " .. gridSizeX .. ", y " .. gridSizeY .. ") to " .. cellSideSize );

			gridSizeX = int( ceil( levelHorizontalSize / cellSideSize ) ) + 1;
			gridSizeY = int( ceil( levelVerticalSize / cellSideSize ) ) + 1;
		}

		if ( gridSizeX <= 0 || gridSizeY <= 0 ) {
			AutoAmbientLogger.Get().Log( LL_Emergency, GetClassName() .. "::CreateGrid(). Array dimention is less or equal to zero. GridSize = ( " .. gridSizeX .. ", " .. gridSizeY .. "); level bbox: t " .. g.topLevelBound .. ", r " .. g.rightLevelBound .. ", b " .. g.bottomLevelBound .. ", l " .. g.leftLevelBound .. "; cell side size: " .. cellSideSize );
			return;
		}

		// Creating a grid itself.
		for ( int i = 0; i < gridSizeX; i++ ) {
			uint lastXIndex = gridX.Push( new( 'AutoAmbientSpawnedGridCellX' ) );
			AutoAmbientSpawnedGridCellX curCellX = gridX[ lastXIndex ];

			for ( int j = 0; j < gridSizeY; j++ )
				curCellX.y.Push( new( 'AutoAmbientListSpawnedKeeper' ) );
		}

		Actor actoriter = spawned.ActorIteratorBegin();

		while ( actoriter ) {
			AddToGrid( actoriter );
			actoriter = spawned.ActorIteratorNext();
		} // of while ( actoriter ) {}


		AutoAmbientLogger.Get().Log( LL_Debug, GetClassName() .. "::CreateGrid(). Created for \"" .. TEXTCOLOR_GRAY .. name .. AutoAmbientLogger.LLCOLOR_Debug .. "\". x " .. gridSizeX .. " (really " .. gridX.Size() .. "), y " .. gridSizeY .. "; moved " .. spawned.Size() .. " actors." );
	} // of void CreateGrid( void ) {}

	void PrintGrid( AutoAmbientLogger logger ) {
		logger.Log( LL_Debug, GetClassName() .. "::PrintGrid() for \"" .. TEXTCOLOR_BLUE .. name .. logger.LLCOLOR_Debug .. "\" (SizeX " .. gridSizeX .. ", SizeY " .. gridSizeY .. "):" );

		for ( int i = 0; i < gridSizeX; i++ ) {
			String gridstr = String.Format( " |- grid[%-2i]: ", i );

			for ( int j = 0; j < gridSizeY; j++ ) {
				AutoAmbientSpawnedGridCellX curX = gridX[ i ];
				uint curCellSize = curX.y[ j ].Size();
				gridstr.AppendFormat( "%s%s", ( curCellSize == 0 )? logger.LLCOLOR_Debug : TEXTCOLOR_GREEN, ( curCellSize > 9 )? ">" : "" .. curCellSize );
			}

			logger.Log( LL_Debug, gridstr );
		}
	} // of void PrintGrid( void ) {}



	static AutoAmbientGroup Create( String groupname, double dist, AutoAmbientGlobalHandler globalhandler ) {
		AutoAmbientGroup newGroup = new( 'AutoAmbientGroup' );

		newGroup.name = groupname;
		newGroup.actorsDistance = dist;
		newGroup.g = globalhandler;

		newGroup.spawned = new( 'AutoAmbientListSpawnedKeeper' );
		newGroup.spawnedOnSide = new( 'AutoAmbientListSpawnedKeeper' );

		return newGroup;
	} // of static AutoAmbientGroup Create( String groupname, double dist, double spreading ) {}


	bool AddClass( class<Actor> cls ) {
		if ( cls )
			classes.Push( cls );

		return !!cls;
	} // of bool AddClass( class<Actor> cls ) {}

	bool AddSoundClass( AutoAmbientSoundDefinition sndclass ) {
		if ( sndclass )
			autoclasses.Push( sndclass );

		return !!sndclass;
	}

	bool AddAutoSoundClass( Sound snd, EAutoAmbientSoundModes mode = AASM_Looped, double vol = 1.0, double attn = 1.0, uint delay1 = 0, uint delay2 = 35 ) {
		AutoAmbientSoundDefinition newclass = AutoAmbientSoundDefinition.Create( "#snd_" .. snd, snd, mode, vol, attn, delay1, delay2 );

		if ( newclass )
			autoclasses.Push( newclass );

		return !!newclass;
	} // of bool AddAutoSoundClass( Sound snd, EAutoAmbientSoundModes mode = AASM_Looped, double vol = 1.0, double attn = 1.0, uint delay1 = 0, uint delay2 = 35 ) {}

	bool AddAutoLoopedSound( Sound snd, double vol = 1.0, double attn = 1.0 ) {
		return AddAutoSoundClass( snd, mode: AASM_Looped, vol: vol, attn: attn );
	}


	void ClearSpawned( void ) {
		if ( spawned )
			spawned.Clear();

		gridX.Clear();
		gridSizeX = 0;
		gridSizeY = 0;
	}

	bool GridCreated( void ) {
		return ( gridX.Size() > 0 );
	}

	void FlushSpawnLineActors( void ) {
		Actor actoriter = spawnedOnSide.ActorIteratorBegin();

		if ( GridCreated() ) {
			while ( actoriter ) {
				AddToGrid( actoriter );
				actoriter = spawnedOnSide.ActorIteratorNext();
			} // of while ( actoriter ) {}
		}

		spawnedOnSide.AppendMoveToList( spawned );

		if ( !GridCreated() && spawned.Size() > wholeListAlgorithmMaxSpawnedSize )
			CreateGrid();

		//if ( !spawnedOnSide.Empty() && AutoAmbientLogger.Get().aaCurLogLevel >= LL_Debug )
		//	AutoAmbientLogger.Get().Log( LL_Debug, GetClassName() .. "::FlushSpawnLineActors(). Actors flushed." );

		//spawnedOnSide.Clear();
	} // of void FlushSpawnLineActors( void ) {}

} // of class AutoAmbientGroup {}



class AutoAmbientSpawnableActor: Actor abstract {
	Side attachedSide;
	// An angle also sets up on spawn (from the normal vector).
}

class AutoAmbientSoundActorConfiguration play {
	virtual class<AutoAmbientSoundActor> GetProperClass( AutoAmbientSoundDefinition def ) {
		class<AutoAmbientSoundActor> outClass;

		switch ( def.sndMode ) {
			case AASM_Looped:
				outClass = "AutoAmbientLoopedSound";
				break;
			case AASM_Fixed:
				outClass = "AutoAmbientFixDlySound";
				break;
			case AASM_Random:
				outClass = "AutoAmbientRndDlySound";
				break;
			default:
				AutoAmbientLogger.Get().Log( LL_Main, GetClassName() .. "::GetProperClass(). Sound mode " .. def.sndMode .. " isn't recognized." );
				break;
		}

		return outClass;
	}

} // of class AutoAmbientSoundActorConfiguration play {}


class AutoAmbientSoundActor: Actor abstract {
	AutoAmbientSoundDefinition def;
	bool actorInitialized; // Call "Init()" with right arguments to set it up.

	// Here are stored the most used and local variables:
	EAutoAmbientSoundModes playsoundMode;
	uint minDelay, maxDelay, curDelay;

	Default {
		+INVISIBLE;
		+BRIGHT;

		+NOINTERACTION;
		+NOBLOCKMAP;
		Scale 0.2;
		Alpha 1.0;
		RenderStyle "STYLE_Stencil";
	}

	virtual void Init( AutoAmbientSoundDefinition initDef ) {
		def = initDef;
		actorInitialized = ( def && ( def.snd != "" ) && ( def.snd != "null" ) );
	} // of virtual void Init( AutoAmbientSoundDefinition initDef ) {}

	virtual void OnSpawn( void ) {
		SetShade( "00 00 88" );
	}


	override final void PostBeginPlay() {
		Super.PostBeginPlay();

		if ( actorInitialized ) {
			OnSpawn();
		} else {
			String soundInfo;

			if ( !def )
				soundInfo = "without linked sound definition";
			else if ( ( def.snd == "" ) || ( def.snd == "null" ) )
				soundInfo = "with no linked sound (wrong sound name in configuration file?)";
			else
				soundInfo = "with sound \"" .. def.snd .. "\"";

			AutoAmbientLogger.Get().Log( LL_Main, GetClassName() .. " at " .. AutoAmbientUtil.squeezeVector3( pos ) .. " " .. soundInfo .. " not initialized properly and thus destroyed." );
			Destroy();
		}
	} // of override void PostBeginPlay() {}

	States {
	Spawn:
		TNT1 A 0;
		SPKR A -1;
		stop;
	}
} // of class AutoAmbientSoundActor: Actor {}


class AutoAmbientLoopedSound: AutoAmbientSoundActor {
	override void OnSpawn( void ) {
		Super.OnSpawn();

		curDelay = Random( 2, 7 );
	}

	override void Tick() {
		if ( curDelay >= 0 ) {
			if ( --curDelay < 0 ) {
				A_PlaySound( def.snd, CHAN_AUTO | CHAN_NOSTOP | CHAN_LOOP, def.sndVolume, true, def.sndAttenuation );

				// In theory this line will play something even if other
				//sounds are presented. On practice I hear no other sound
				//handling differences between "A_StartSound()" and
				//back-compatible "A_PlaySound()":
				//A_StartSound( def.snd, CHAN_AUTO, CHANF_LOOP | CHAN_NOSTOP | CHANF_OVERLAP, def.sndVolume, def.sndAttenuation );
			}
		}

		Super.Tick();
	}

} // of AutoAmbientLoopedSound: AutoAmbientSoundActor {}

class AutoAmbientFixDlySound: AutoAmbientSoundActor {
	override void OnSpawn( void ) {
		Super.OnSpawn();
		curDelay = Random( 0, maxDelay );
	}

	override void Init( AutoAmbientSoundDefinition initDef ) {
		Super.Init( initDef );

		minDelay = maxDelay = def.minDelay;
	}

	override void Tick() {
		if ( curDelay-- <= 0 ) {
			A_PlaySound( def.snd, CHAN_AUTO, def.sndVolume, false, def.sndAttenuation );
			curDelay = minDelay;
		}

		Super.Tick();
	}
} // of class AutoAmbientFixDlySound: AutoAmbientSoundActor {}

class AutoAmbientRndDlySound: AutoAmbientSoundActor {
	override void Init( AutoAmbientSoundDefinition initDef ) {
		Super.Init( initDef );

		minDelay = def.minDelay;
		maxDelay = def.maxDelay;
	}

	override void Tick() {
		if ( curDelay-- <= 0 ) {
			A_PlaySound( def.snd, CHAN_AUTO, def.sndVolume, false, def.sndAttenuation );
			curDelay = Random( minDelay, maxDelay );
		}

		Super.Tick();
	}
} // of class AutoAmbientRndDlySound: AutoAmbientSoundActor {}

