//

class AutoAmbientLogger: Thinker {
	const LLCOLOR_DEBUG = TEXTCOLOR_DARKGRAY;
	const LLCOLOR_EMERGENCY = TEXTCOLOR_FIRE;

	int aaCurLogLevel;

	static void UpdateLogLevel( void ) {
		AutoAmbientLogger.Get().aaCurLogLevel = CVar.FindCVar( "mcm_aambient_loglevel" ).GetInt();
	}

	static play AutoAmbientLogger Get( void ) {
		AutoAmbientLogger it = AutoAmbientLogger( ThinkerIterator.Create( "AutoAmbientLogger", STAT_STATIC ).Next() );

		if ( !it ) {
			// Creating and initializating a singleton global object:
			it = new( "AutoAmbientLogger" );
			it.ChangeStatNum( STAT_STATIC );
			it.UpdateLogLevel(); // This one calls "Get()" again, yeah...
		}

		return it;
	} // of static play AutoAmbientLogger Get( void ) {}


	// Prints well-decorated information string. "LL_NoPrefix" also disables
	//default color mark:
	static clearscope void ClearscopeLog( EAAmbientLogLevels loglevel, String text ) {
		String logPrefix = "";

		if ( !( loglevel & LL_NoPrefix ) ) {
			switch ( loglevel & LL__No_Flags_Mask ) {
				case LL_Debug:
					logPrefix = LLCOLOR_DEBUG .. "[AA Debug] ";
					break;
				case LL_Emergency:
					logPrefix = TEXTCOLOR_RED .. "[AutoAmbient emergency] " .. LLCOLOR_EMERGENCY;
					break;
				default:
					logPrefix = TEXTCOLOR_GRAY .. "[AA] \c-";
					break;
			}
		} // of if ( !( loglevel & LL_NoPrefix ) ) {}

		String lastSymbol = text.Mid( text.Length() - 1 );
		bool extraDot = !( lastSymbol == "." || lastSymbol == "!" || lastSymbol == "?" || lastSymbol == ";" || lastSymbol == ":" );

		console.printf( logPrefix .. text .. ( extraDot? "." : "" ) );
	} // of static clearscope void ClearscopeLog( EAAmbientLogLevels loglevel, String text ) {}

	// A play-scope wrapper around a data-scope method (mostly used):
	static play void Log( EAAmbientLogLevels loglevel, String text ) {
		if ( AutoAmbientLogger.Get().aaCurLogLevel >= ( loglevel & LL__No_Flags_Mask ) )
			ClearscopeLog( loglevel, text );
	}

} // of class AutoAmbientLogger: Thinker {}


class AutoAmbientUtil {
    static String squeezeVector3( vector3 vec ) {
        return "(" .. int( vec.x ) .. ", " .. int( vec.y ) .. ", " .. int( vec.z ) .. ")";
    }
} // of class AutoAmbientUtil {}



extend class AutoAmbientGlobalHandler {
	String debugTextureDataPrefix;
	AutoAmbientLogger debugLogger;

	private void printDebugTextureData( uint texindex, AutoAmbientTexture curtex ) {
		if ( curtex ) {
			debugLogger.Log( LL_Debug, debugTextureDataPrefix .. "TEX #" .. texindex .. " \"" .. curtex.id .. "\": size " .. curtex.size .. ", flags " .. curtex.linesCheckFlags .. ", spawnchances same:" .. curtex.sameLineDistSpawnChance .. " other:" .. curtex.otherLineDistSpawnChance .. ", groups:" );
			String debugStr = debugTextureDataPrefix;

			for ( int j = 0; j < curtex.groups.Size(); j++ ) {
				debugStr = debugStr .. " (" .. TEXTCOLOR_GRAY;

				if ( !curtex.groups[ j ] )
					debugStr = debugStr .. debugLogger.LLCOLOR_EMERGENCY .. "Group #" .. j .. " is NULL!";
				else if ( !curtex.groupparams[ j ] )
					debugStr = debugStr .. debugLogger.LLCOLOR_EMERGENCY .. "Group \"" .. curtex.groups[ j ].name .. "\" (#" .. j .. ")'s texparam is NULL!!!";
				else
					debugStr = debugStr .. curtex.groups[ j ].name .. " at " .. curtex.groupparams[ j ].name;

				debugStr = debugStr .. debugLogger.LLCOLOR_DEBUG .. ")";
			}

			if ( debugStr == "" )
				debugStr = TEXTCOLOR_YELLOW .. " No groups defined";

			debugLogger.Log( LL_Debug, " \\_" .. debugStr );
		} else {
			debugLogger.Log( LL_Debug, debugTextureDataPrefix .. "TEX #" .. texindex .. ": NULL!!!" );
		}
	}

	private void OnRegisterDebugFullOutput( void ) {
		// You cannot call a function with an Array<> argument type in some
		//old versions of the engine.

		debugLogger = AutoAmbientLogger.Get();

		debugLogger.Log( LL_Debug, TEXTCOLOR_SAPPHIRE .. GetClassName() .. "::OnRegister(). Sound definitions (total " .. sounddefs.Size() .. ")" .. debugLogger.LLCOLOR_DEBUG .. ":" );
		for ( int i = 0; i < sounddefs.Size(); i++ ) {
			if ( sounddefs[ i ] )
				debugLogger.Log( LL_Debug, "SND #" .. i .. " \"" .. sounddefs[ i ].name .. "\": snd " .. sounddefs[ i ].snd .. " vol " .. sounddefs[ i ].sndVolume .. " attn " .. sounddefs[ i ].sndAttenuation .. ", mode " .. sounddefs[ i ].sndMode .. " " .. sounddefs[ i ].minDelay .. " " .. sounddefs[ i ].maxDelay );
			else
				debugLogger.Log( LL_Debug, "SND #" .. i .. ": NULL!!!" );
		} // of for ( int i = 0; i < sounddefs.Size(); i++ ) {}

		debugLogger.Log( LL_Debug, TEXTCOLOR_SAPPHIRE .. GetClassName() .. "::OnRegister(). Texture parameters (total " .. textureparams.Size() .. ")" .. debugLogger.LLCOLOR_DEBUG .. ":" );
		for ( int i = 0; i < textureparams.Size(); i++ ) {
			if ( textureparams[ i ] )
				debugLogger.Log( LL_Debug, "TPM #" .. i .. " \"" .. textureparams[ i ].name .. "\": " .. textureparams[ i ].start .. "++" .. textureparams[ i ].offset .. " rnd " .. textureparams[ i ].spreading .. " chnc " .. textureparams[ i ].chance );
			else
				debugLogger.Log( LL_Debug, "TPM #" .. i .. ": NULL!!!" );
		} // of for ( int i = 0; i < textureparams.Size(); i++ ) {}

		debugLogger.Log( LL_Debug, TEXTCOLOR_SAPPHIRE .. GetClassName() .. "::OnRegister(). Groups (total " .. groups.Size() .. ")" .. debugLogger.LLCOLOR_DEBUG .. ":" );
		for ( int i = 0; i < groups.Size(); i++ ) {
			AutoAmbientGroup curgroup = groups[ i ];

			if ( curgroup ) {
				debugLogger.Log( LL_Debug, "GRP #" .. i .. " \"" .. curgroup.name .. "\": mindist " .. curgroup.actorsDistance .. ", &spawned: " .. curgroup.spawned .. ", &spawnedOnLine: " .. curgroup.spawnedOnLine .. ", classes:" );
				String debugStr = "";

				for ( int j = 0; j < curgroup.classes.Size(); j++ ) {
					debugStr = debugStr .. " (" .. TEXTCOLOR_GRAY;

					if ( !curgroup.classes[ j ] )
						debugStr = debugStr .. " (" .. debugLogger.LLCOLOR_EMERGENCY .. "Class #" .. j .. " is NULL!";
					else
						debugStr = debugStr .. curgroup.classes[ j ].GetClassName();

					debugStr = debugStr .. debugLogger.LLCOLOR_DEBUG .. ")";
				}

				for ( int j = 0; j < curgroup.autoclasses.Size(); j++ ) {
					debugStr = debugStr .. " (" .. TEXTCOLOR_GRAY;

					if ( !curgroup.autoclasses[ j ] )
						debugStr = debugStr .. " (" .. debugLogger.LLCOLOR_EMERGENCY .. "Autoclass #" .. j .. " is NULL!";
					else
						debugStr = debugStr .. "Auto:" .. curgroup.autoclasses[ j ].name;

					debugStr = debugStr .. debugLogger.LLCOLOR_DEBUG .. ")";
				}

				if ( debugStr == "" )
					debugStr = TEXTCOLOR_YELLOW .. " No classes defined";

				debugLogger.Log( LL_Debug, " \\_" .. debugStr );
			} else {
				debugLogger.Log( LL_Debug, "GRP #" .. i .. ": NULL!!!" );
			}
		} // of for ( int i = 0; i < groups.Size(); i++ ) {}

		debugTextureDataPrefix = "";

		debugLogger.Log( LL_Debug, TEXTCOLOR_SAPPHIRE .. GetClassName() .. "::OnRegister(). Global textures (total " .. textures.Size() .. ")" .. debugLogger.LLCOLOR_DEBUG .. ":" );
		for ( int i = 0; i < textures.Size(); i++ )
			printDebugTextureData( i, textures[ i ] );

		if ( maptextures.Size() ) {
			debugTextureDataPrefix = TEXTCOLOR_SAPPHIRE .. "> \c-";

			debugLogger.Log( LL_Debug, TEXTCOLOR_SAPPHIRE .. GetClassName() .. "::OnRegister(). Map defines (total " .. maptextures.Size() .. ")" .. debugLogger.LLCOLOR_DEBUG .. ":" );

			for ( int i = 0; i < maptextures.Size(); i++ ) {
				AutoAmbientMapsData curmap = maptextures.maps[ i ];
				debugLogger.Log( LL_Debug, "MAP #" .. i .. ": name \"" .. TEXTCOLOR_BLUE .. curmap.mapname .. "\c-\"/hash \"" .. TEXTCOLOR_BLUE .. curmap.maphash .. "\c-\", no dflt tex: " .. curmap.restrictDefaultTextures .. ", textures:" );

				for ( int j = 0; j < curmap.textures.Size(); j++ )
					printDebugTextureData( j, curmap.textures[ j ] );
			}
		} else {
			debugLogger.Log( LL_Debug, TEXTCOLOR_SAPPHIRE .. GetClassName() .. "::OnRegister(). No map defines." );
		}

	} // of private void OnRegisterDebugFullOutput( void ) {}

} // of extend class AutoAmbientGlobalHandler {}
