// Just moving one large method into a separate file.

extend class AutoAmbientGlobalHandler {

	int SpawnAllActors( AutoAmbientCacheTextureKeeper cachedTextures ) {
		int totalAutoAmbientActorsSpawned = 0;

		// A-a-argh! Seven nested "for" cycles in worst case!..
		//(Alright, it's non-exponential dependence, most of them has from one 
		//to three iterations).

		// All sides cycle:
		for ( int curSideIndex = 0; curSideIndex < level.Sides.Size(); curSideIndex++ ) {
			Side attachSide = level.Sides[ curSideIndex ];

			// Top/middle/bottom texture on line cycle:
			for ( int curSidePos = Side.top; curSidePos <= Side.bottom; curSidePos++ ) {
				TextureID texID = attachSide.GetTexture( curSidePos );

				if ( texID ) {
					// Finding texture in cache array or creating it there:
					AutoAmbientCacheTexture cachedTexture = cachedTextures.Update( texID );

					// Spawning actor(s) according to the cached groups:
					AutoAmbientTexture texdef = cachedTexture.texdef;
					if ( texdef ) {

						// Handling of the common part:
						Line attachLine = attachSide.linedef;

                       	//console.printf( "action: " .. attachLine.special .. ", com " .. texdef.linesCheckFlags & AALCF_CommonLine .. " / act " .. texdef.linesCheckFlags & AALCF_ActionLine );
                       	if ( 	( !attachLine.special && !( texdef.linesCheckFlags & AALCF_HandleCommonLines ) )
                       		||	(  attachLine.special && !( texdef.linesCheckFlags & AALCF_HandleActionLines ) ) )
                       		continue; // Return if user denies current line (action or common) spawning.

                       	Side oppositeSide = ( ( attachLine.sidedef[ 0 ] == attachSide )? attachLine.sidedef[ 1 ] : attachLine.sidedef[ 0 ] );
                       	double lineWidth = attachLine.delta.Length();
                       	double lineHeight = 0;
                       	double firstPointFloorZOffset = 0.0;

                       	double unpeggedOffset = 0.0;

                       	// [A]ttaching/[O]pposite side, [F]loor/[C]eiling heights:
                       	double af = attachSide.sector.floorplane.d * attachSide.sector.floorplane.negiC;
                       	double ac = attachSide.sector.ceilingplane.d * attachSide.sector.ceilingplane.negiC;
                       	double of = 0.0;
                       	double oc = 0.0;
                       	if ( oppositeSide ) {
                       		of = oppositeSide.sector.floorplane.d * oppositeSide.sector.floorplane.negiC;
                       		oc = oppositeSide.sector.ceilingplane.d * oppositeSide.sector.ceilingplane.negiC;
                       	}

                       	switch ( curSidePos ) {
                       		case Side.top:
                       			if ( oppositeSide ) {
                       				if ( oppositeSide.sector.GetTexture( Sector.ceiling ) == skyflatnum && ac > oc )
                       					return 0; // Sky lines skipping (see "TNT: Evilution", MAP27 "Mount pain").

                       				lineHeight = max( 0, ac - oc );
                       				if ( lineHeight > 0 )
                       					lineHeight = min( lineHeight, ac - af );

                       				firstPointFloorZOffset = oc - af;

                       				if ( attachLine.flags & Line.ML_DONTPEGTOP )
                       					unpeggedOffset = ( lineHeight - texdef.size.y ) % texdef.size.y;
                       			}
                       			break;
                       		case Side.mid:
                       			lineHeight = max( 0, ac - af );

                       			// TODO: cannot recognize now what must be here...
                       			//if ( lineHeight > 0 )
                       			//	lineHeight = min( lineHeight, oc - of );

                       			if ( !( attachLine.flags & Line.ML_DONTPEGBOTTOM ) )
                       				unpeggedOffset = ( lineHeight - texdef.size.y ) % texdef.size.y;
                       			break;
                       		case Side.bottom:
                       			if ( oppositeSide ) {
                       				//if ( oppositeSide.sector.GetTexture( Sector.floor ) == skyflatnum && af < ac )
                       				//	return 0; // Don't sure if FSKY1 expands to the floors.

                       				lineHeight = max( 0, of - af );
                       				if ( lineHeight > 0 )
                       					lineHeight = min( lineHeight, ac - af );

                       				if ( !( attachLine.flags & Line.ML_DONTPEGBOTTOM ) )
                       					unpeggedOffset = lineHeight - texdef.size.y;
                       				else
                       					unpeggedOffset = ( ac - af ) % texdef.size.y;
                       			}
                       			break;
                       		default:
                       			break;
                       	} // of switch ( curSidePos ) {}


                       	if ( lineHeight == 0.0 || lineWidth == 0.0 )
                       		continue; // There's no point in creating an actor if the texture is not visible.

                       	if ( lineHeight < 0.0 || lineWidth < 0.0 ) {
                       		logger.Log( LL_Emergency, GetClassName() .. "::SpawnAllActors(). Line #" .. attachLine.Index() .. " calculated height " .. lineHeight .. "/width " .. lineWidth .. " is less than 0. It's at least extremely strange." );
                       		continue;
                       	}


                       	if ( unpeggedOffset != 0.0 )
                       		unpeggedOffset = texdef.size.y - unpeggedOffset;

                       	vector3 firstPoint = ( // From bottom-left (as first quadrant on cartesian plane).
                       			attachLine.v1.p.x,
                       			attachLine.v1.p.y,
                       			af + firstPointFloorZOffset
                       	);



						// Handling of different groups:

						// Storing actors spawned on one line to flush them at
						//once later. May look illogical, but it saves about
						//2-13% of time (see Doom 2 MAP24).
						Array<AutoAmbientGroup> uniqueGroups;

						// It's strange, but it doesn't clear itself on QZDoom 2.1pre.
						uniqueGroups.Clear();

						for ( int groupIndex = 0; groupIndex < texdef.groups.Size(); groupIndex++ ) {
							AutoAmbientGroup curGroup = texdef.groups[ groupIndex ];

                           	if ( !curgroup.classes.Size() && !curgroup.autoclasses.Size() )
                           		continue; // We cannot spawn something if we have no spawn data for the current group.

                           	uint classesArraySize = curgroup.classes.Size();
                           	AutoAmbientTextureParameter texparam = texdef.groupparams[ groupIndex ];

							double texStartXY = ( texparam.start.x - attachSide.GetTextureXOffset( curSidePos ) % texdef.size.x ) % texdef.size.x;
							double texEndXY = lineWidth / ( texparam.offset.x / texdef.size.x );

							double texStartZ = ( attachSide.GetTextureYOffset( curSidePos ) + texparam.start.y ) % texdef.size.y - unpeggedOffset;
							double texEndZ = lineHeight / ( texparam.offset.y / texdef.size.y );

                           	// Converting virtual 2D-plane to the 3D-aligned line plane
                           	//and adding potential positions to the array:
                           	for ( double texz = texStartZ; texz < texEndZ; texz += texparam.offset.y ) {
                           		for ( double texxy = texStartXY; texxy < texEndXY; texxy += texparam.offset.x ) {

                           			if ( texparam.chance != 0.0 && FRandom( 0.0, 1.0 ) > texparam.chance )
                           				continue; // Skip spawning if texture parameter chance to spawn failed.

                           			double texxyRandomized = texxy + FRandom( -texparam.spreading.x, texparam.spreading.x );
                           			double texzRandomized = texz + FRandom( -texparam.spreading.y, texparam.spreading.y );

                           			if ( texxyRandomized < 0.0 || texxyRandomized > lineWidth || texzRandomized < 0.0 || texzRandomized > lineHeight )
                           				continue; // Skip spawning if random tried to spawn actor outside the texture.

                           			// Converting to the world 3D-coordinates. Normalizing
                           			//(v1-v2), multiplying it to the wish length...
                           			vector2 actorPosXY = firstPoint.xy + attachLine.delta / lineWidth * texxyRandomized;
                           			// ...And adding a Z-component:
                           			vector3 newPos = ( actorPosXY.x, actorPosXY.y, firstPoint.z + texzRandomized );

                           			//console.printf( "Actor for tex \"" .. TexMan.GetName( texdef.id ) .. "\": relpos " .. actorPosXY - firstPoint.xy .. ", firstPointPos " .. firstPoint .. ", texMapOfs " .. texMapOffset .. ", line w/h " .. lineWidth .. "/" .. lineHeight );

                           			bool grouplingTooClose = false; // Same meaning as in word "Sibling".

                           			// Removing position if it are not far enough away from
                           			//previously spawned actors on current line and/or other lines:
                           			if ( texdef.sameLineDistSpawnChance < 1.0 && !curgroup.spawnedOnSide.Empty() )
                           				grouplingTooClose = curgroup.checkSpawnDistance( newPos, curgroup.spawnedOnSide, texdef.linesCheckFlags & AALCF_SelfLineDistMultipl, texdef.sameLineDistSpawnChance );

                           			if ( texdef.otherLineDistSpawnChance < 1.0 && !grouplingTooClose )
                           				grouplingTooClose = curgroup.CheckForCloseNeighbours( newPos, texdef.linesCheckFlags & AALCF_OtherLinesDistMultipl, texdef.otherLineDistSpawnChance );
                           			//	grouplingTooClose = curgroup.checkSpawnDistance( newPos, spawned, texdef.linesCheckFlags & AALCF_OtherLinesDistMultipl, texdef.otherLineDistSpawnChance );

                           			// Adding new actor to the array if it may be created:
                           			if ( !grouplingTooClose ) {
                           				Actor newActor = NULL;

                           				// Get a random class from the (auto)classes arrays:
                           				uint rnd = Random( 0, classesArraySize + curgroup.autoclasses.Size() - 1 );

                           				if ( rnd < classesArraySize ) {
                           					newActor = Actor.Spawn( curgroup.classes[ rnd ], newPos );
                           				} else if ( curgroup.autoclasses.Size() ) {
                           					// An expandable part of the code (maybe later...).
                           					class<AutoAmbientSoundActor> properclass = autoclassConfig.GetProperClass( curgroup.autoclasses[ rnd - classesArraySize ] );

                           					newActor = Actor.Spawn( properclass, newPos );
                           					AutoAmbientSoundActor( newActor ).Init( curgroup.autoclasses[ rnd - classesArraySize ] );
                           				} else {
                           					logger.Log( LL_Emergency, GetClassName() .. "::SpawnAllActors(). Warning: random value " .. rnd .. " is out-of-bounds of classes[ " .. classesArraySize .. " ] and autoclasses[ " .. curgroup.autoclasses.Size() .. " ]." );
                           				}

                           				if ( newActor ) {
                           					if ( newActor is 'AutoAmbientSpawnableActor' ) {
                           						AutoAmbientSpawnableActor( newActor ).attachedSide = attachSide;

                           						vector2 lineNormal = Actor.RotateVector( attachLine.delta / lineWidth, ( ( attachSide == attachLine.sidedef[ 0 ] )? 90.0 : -90.0 ) ); // Not sure if this line is correct, actually.

                           						newActor.angle = AutoAmbientUtil.vector2ToAngle( lineNormal );
                           					}

                           					curgroup.spawnedOnSide.AppendSpawnedActor( newActor );
                           					totalAutoAmbientActorsSpawned++;

                           					if ( logger.aaCurLogLevel >= LL_Detailed )
                           						logger.Log( LL_Detailed, TEXTCOLOR_GRAY .. "Actor \c-" .. newActor.GetClassName() .. TEXTCOLOR_GRAY .. " spawned on \"\c-" .. texID .. "->" .. curgroup.name .. TEXTCOLOR_GRAY .. "\" at " .. AutoAmbientUtil.squeezeVector3( newActor.pos ) .. "." );
                           				}
                           			} // of if ( !grouplingTooClose ) {}

                           		} // of for ( double texxy = ( texparam.start.x - attachSide.GetTextureXOffset( curSidePos ) % texdef.size.x ) % texdef.size.x; texxy < lineWidth / ( texparam.offset.x / texdef.size.x ); texxy += texparam.offset.x ) {}
                           	} // of for ( double texz = ( attachSide.GetTextureYOffset( curSidePos ) + texparam.start.y ) % texdef.size.y - unpeggedOffset; texz < lineHeight / ( texparam.offset.y / texdef.size.y ); texz += texparam.offset.y ) {}

							bool uniqueGroupFlag = true;

							for ( int k = 0; k < uniqueGroups.Size(); k++ ) {
								if ( curGroup == uniqueGroups[ k ] ) {
									uniqueGroupFlag = false;
									break;
								}
							}

							if ( uniqueGroupFlag && curGroup.spawnedOnSide.Size() )
								uniqueGroups.Push( curGroup );
						} // of for ( int groupIndex = 0; groupIndex < texdef.groups.Size(); groupIndex++ ) {}


						// Move all actors spawned on line to the general array:
						for ( int j = 0; j < uniqueGroups.Size(); j++ )
							uniqueGroups[ j ].FlushSpawnLineActors();

					} // of if ( texdef ) {}
				} // of if ( texID ) {}

			} // of for ( int curSidePos = 0; curSidePos < 2; curSidePos++ ) {}

		} // of for ( int curSideIndex = 0; curSideIndex < level.Sides.Size(); curSideIndex++ ) {}

		return totalAutoAmbientActorsSpawned;
	} // of int SpawnAllActors( void ) {}

} // of extend class AutoAmbientGlobalHandler {}
